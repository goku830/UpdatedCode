import pandas as pd
import numpy as np
from scipy.spatial.distance import braycurtis

# ======= 1. Load Data =======
file_path = r"C:\Users\brand\Desktop\AllCombineSpeciasAnalysis\Test 4\filtered_mean20_std30.xlsx"
data = pd.read_excel(file_path)

# Separate features and labels
X = data.drop(columns=['species', 'label', 'Source'])
y = data['label']  # 0 = Healthy, 1 = AD

biomarker_names = X.columns.tolist()
biomarker_matrix = X.to_numpy()
diagnosis_labels = y.to_numpy()

# Get AD and Healthy indices
ad_indices = np.where(diagnosis_labels == 1)[0]
healthy_indices = np.where(diagnosis_labels == 0)[0]

# Extract matrices
ad_matrix = biomarker_matrix[ad_indices, :]
healthy_matrix = biomarker_matrix[healthy_indices, :]

# ======= 2. Compute Bray-Curtis for All Biomarkers =======
results = []
for i, biomarker in enumerate(biomarker_names):
    ad_vals = ad_matrix[:, i]
    healthy_vals = healthy_matrix[:, i]

    # Equal sample sizes
    min_len = min(len(ad_vals), len(healthy_vals))
    ad_vals = ad_vals[:min_len]
    healthy_vals = healthy_vals[:min_len]

    # Check for all-zero or disjoint
    if np.all(ad_vals == 0) and np.all(healthy_vals == 0):
        bc = np.nan
    elif np.sum((ad_vals > 0) & (healthy_vals > 0)) == 0:
        bc = np.nan
    else:
        bc = braycurtis(ad_vals, healthy_vals)

    ad_mean = np.mean(ad_vals)
    healthy_mean = np.mean(healthy_vals)
    dominant = "AD" if ad_mean > healthy_mean else "Healthy" if healthy_mean > ad_mean else "Equal"

    # RNA/DNA classification
    data_type = "RNA" if biomarker.startswith("mt_") else "DNA"

    results.append({
        "Biomarker": biomarker,
        "Bray_Curtis_CrossGroup": 1.0 if np.isnan(bc) else bc,
        "Dominant_Group": dominant,
        "Data_Type": data_type
    })

# ======= 3. Create and Save Results =======
beta_df = pd.DataFrame(results)
beta_df = beta_df.sort_values(by="Bray_Curtis_CrossGroup", ascending=True)

output_path = r"C:\Users\brand\Desktop\All_BrayCurtis_Biomarkers_Species.csv"
beta_df.to_csv(output_path, index=False)

print(f"✅ Saved Bray-Curtis results to {output_path}")
import matplotlib.pyplot as plt

# Optional: Color bars based on dominant group
bar_colors = ['red' if dom == 'AD' else 'blue' for dom in beta_df['Dominant_Group']]

plt.figure(figsize=(20, 8))
plt.bar(beta_df["Biomarker"], beta_df["Bray_Curtis_CrossGroup"], color=bar_colors)
plt.xticks(rotation=45, ha='right', fontsize=10)
plt.xlabel("Biomarker")
plt.ylabel("Bray-Curtis Dissimilarity")
plt.title("Bray-Curtis Distance: AD vs Healthy")
plt.tight_layout()
plt.show()
## Next Code





import pandas as pd
import numpy as np
from scipy.spatial.distance import pdist, squareform
import matplotlib.pyplot as plt
import seaborn as sns
from tqdm import tqdm

# === Load data ===
file_path = r"C:\Users\brand\Desktop\AllCombineSpeciasAnalysis\Test 4\filtered_mean20_std30.xlsx"
data = pd.read_excel(file_path)

# === Extract feature matrix and labels ===
X = data.drop(columns=['species', 'label', 'Source'])  # Microbial features
y = data['label']  # 0 = Healthy, 1 = AD

# === Compute Bray-Curtis distance between subjects ===
dist_matrix = pdist(X.values, metric='braycurtis')  # Condensed distance matrix
square_dist = squareform(dist_matrix)  # Square matrix (n_samples x n_samples)

# === Save Bray-Curtis matrix to file ===
dist_df = pd.DataFrame(square_dist, index=data.index, columns=data.index)
dist_df.to_csv(r"C:\Users\brand\Desktop\subject_braycurtis_matrix.csv")
print("✅ Bray-Curtis subject matrix saved.")

# Assuming `square_dist` is your (n_samples x n_samples) Bray-Curtis matrix from earlier

# Compute average Bray-Curtis per subject
avg_dissimilarity = np.mean(square_dist, axis=1)

# Create DataFrame for plotting
subject_ids = [f"Sample_{i}" for i in range(len(avg_dissimilarity))]
avg_df = pd.DataFrame({
    "Subject": subject_ids,
    "Avg_BrayCurtis": avg_dissimilarity,
    "Diagnosis": y.replace({0: "Healthy", 1: "AD"})
})

# Plot as bar graph
import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(16, 6))
sns.barplot(data=avg_df, x="Subject", y="Avg_BrayCurtis", hue="Diagnosis", dodge=False)
plt.xticks(rotation=90)
plt.title("Average Bray-Curtis Dissimilarity per Subject")
plt.ylabel("Average Bray-Curtis")
plt.xlabel("Subject")
plt.tight_layout()
plt.show()
# Export average Bray-Curtis dissimilarity per subject to CSV
avg_df.to_csv(r"C:\Users\brand\Desktop\avg_braycurtis_per_subject.csv", index=False)
print("✅ Average Bray-Curtis dissimilarity per subject saved.")

# Compute standard deviation per species
feature_variability = X.std().sort_values()

# Plot
import matplotlib.pyplot as plt
plt.figure(figsize=(12, 5))
feature_variability.plot(kind='bar')
plt.title("Standard Deviation of Each Microbial Feature Across Subjects")
plt.ylabel("Standard Deviation")
plt.xlabel("Microbial Feature")
plt.xticks(rotation=90)  # Rotate x-axis labels vertically
plt.tight_layout()
plt.show()
# Export standard deviation per microbial feature to CSV
feature_variability.to_csv(r"C:\Users\brand\Desktop\std_per_microbe_across_subjects.csv", header=['Standard_Deviation'])
print("✅ Standard deviation per microbial feature saved.")


# === Split data by diagnosis ===
X_ad = X[y == 1]
X_healthy = X[y == 0]

# === Compute mean abundance of each species in AD and Healthy groups ===
mean_ad = X_ad.mean()
mean_healthy = X_healthy.mean()

# === Create summary DataFrame without fold change ===
dominance_df = pd.DataFrame({
    'AD_mean': mean_ad,
    'Healthy_mean': mean_healthy
})
dominance_df['Dominant_in'] = np.where(
    dominance_df['AD_mean'] > dominance_df['Healthy_mean'],
    'AD',
    'Healthy'
)

# === Save to CSV ===
dominance_df.to_csv(r"C:\Users\brand\Desktop\species_dominance_AD_vs_Healthy.csv")
print("✅ Species dominance table saved.")
