% === Load Data ===
ad_degrees = readtable('C:\Users\brand\Desktop\AllCombineSpeciasAnalysis\Test 4\Gephi\gephi_AD_weighted_species.csv');
features = readtable('C:\Users\brand\Desktop\AllCombineSpeciasAnalysis\Test 4\top_10_features_AD_combined_species.csv');
sig_bacteria = readtable('C:\Users\brand\Desktop\AllCombineSpeciasAnalysis\Test 4\Significant_Species_Combined_vs_Healthy.csv');
beta_div_similar = readtable('C:\Users\brand\Desktop\AllCombineSpeciasAnalysis\Test 4\Beta Diversity\Top10_STD_Similar_Plot_Data.csv');
beta_div_dissimilar = readtable('C:\Users\brand\Desktop\AllCombineSpeciasAnalysis\Test 4\Beta Diversity\Top10_STD_Dissimilar_Plot_Data.csv');

% === Filter out "AD" as a node ===
mask = ~strcmpi(ad_degrees.Source, 'AD') & ~strcmpi(ad_degrees.Target, 'AD');
ad_base = ad_degrees(mask, :);

% === Compute Weighted Degree ===
biomarkers = unique([ad_base.Source; ad_base.Target]);
weighted_degree = zeros(size(biomarkers));
for i = 1:length(biomarkers)
    biom = biomarkers{i};
    mask_src = strcmp(ad_base.Source, biom);
    mask_tgt = strcmp(ad_base.Target, biom);
    weighted_degree(i) = sum(ad_base.Weight(mask_src)) + sum(ad_base.Weight(mask_tgt));
end
ad_degree_table = table(biomarkers, weighted_degree, 'VariableNames', {'Biomarker', 'Weighted_Degree'});
ad_degree_table = sortrows(ad_degree_table, 'Weighted_Degree', 'descend');

% === Clean biomarker names for matching ===
clean_names = regexprep(ad_degree_table.Biomarker, '\s+\(RNA\)|\s+\(DNA\)', '');
clean_names = lower(strtrim(clean_names));

% === Create lookup sets ===
features_set = lower(strtrim(string(features{:,1})));
sig_set = lower(strtrim(string(sig_bacteria{:,1})));
% Define inline cleaning
beta_div_similar.Properties.VariableNames
head(beta_div_similar)
clean_beta_sim = lower(strtrim(regexprep(string(beta_div_similar{:,1}), '\s+\(RNA\)|\s+\(DNA\)', '')));
clean_beta_dissim = lower(strtrim(regexprep(string(beta_div_dissimilar{:,1}), '\s+\(RNA\)|\s+\(DNA\)', '')));

% Assign
beta_similar_set = clean_beta_sim;
beta_dissimilar_set = clean_beta_dissim;

% === Assign Colors ===
colors = strings(length(clean_names),1);
for i = 1:length(clean_names)
    name = clean_names{i};
    in_feat = any(strcmp(name, features_set));
    in_sig = any(strcmp(name, sig_set));
    in_sim = any(strcmp(name, beta_similar_set));
    in_dissim = any(strcmp(name, beta_dissimilar_set));
    
        
      if in_sig && (in_sim || in_dissim)
        colors(i) = "black";
    elseif in_feat && in_sig
        colors(i) = "blue";
    elseif in_feat && (in_sim || in_dissim)
        colors(i) = "pink";
    elseif in_sim
        colors(i) = "cyan";
    elseif in_dissim
        colors(i) = "orange";
    elseif in_feat
        colors(i) = "purple";
    elseif in_sig
        colors(i) = "green";
    else
        colors(i) = "gray";
    end
end

% === Take Top 20 ===
topN = 20;
top_table = ad_degree_table(1:topN, :);
top_color_names = colors(1:topN);

% === Color Mapping ===
color_map = containers.Map( ...
    {'black', 'purple', 'green', 'orange', 'gray', 'blue', 'pink', 'cyan'}, ...
    {[0 0 0], [0.5 0 0.5], [0 0.5 0], [1 0.5 0], ...
     [0.5 0.5 0.5], [0 0 1], [1 0.41 0.71], [0 1 1]} ...
);

bar_colors = zeros(topN,3);
for i = 1:topN
    bar_colors(i,:) = color_map(top_color_names(i));
end
disp(top_table.Biomarker)

% === Create Bar Plot ===
figure;
b = bar(top_table.Weighted_Degree, 'FaceColor','flat');
b.CData = bar_colors;
b.Annotation.LegendInformation.IconDisplayStyle = 'off';

set(gca, 'XTick', 1:topN);
short_labels = regexprep(top_table.Biomarker, '\s+\(RNA\)|\s+\(DNA\)', ''); % Remove "(RNA)" and "(DNA)"
short_labels = regexprep(short_labels, '^mt_', '');  % Remove "mt_" prefix
short_labels = regexprep(short_labels, '^mg_|^mp_|^mb_|^mc_|^ms_|^mv_|^mi_', '');  % Remove other prefixes if needed
short_labels = strrep(short_labels, 'candidate division TM7 single-cell isolate TM7a', 'TM7a');  % Optional
short_labels = string(short_labels);
short_labels(~contains(lower(short_labels), 'dna')) = short_labels(~contains(lower(short_labels), 'dna')) + " (DNA)";

% === Set axis and labels ===
 ax = gca;
    ax.Position = [0.09  0.06  0.9  0.9];   % lower bottom to give space for larger labels
    ax.FontSize = 15;                        % increase tick‐label size
    ax.TickLength = [0 0];
    set(ax, ...
        'XTick', 1:height(top_table), ...
        'XTickLabel', short_labels, ...
        'XTickLabelRotation', 55);
% Set log scale for Y axis
set(ax, 'YScale', 'log')

% Axis labels and title
xlabel('AD Species', 'FontSize', 15)  
ylabel('P Value', 'FontSize', 15)
%title('Top 20 Species in AD Corelation Network', 'FontSize', 15)

% === Add Legend ===
hold on
% === Add Legend ===
hold on
blackPatch = patch(NaN, NaN, [0 0 0]);
purplePatch = patch(NaN, NaN, [0.5 0 0.5]);
greenPatch = patch(NaN, NaN, [0 0.5 0]);
orangePatch = patch(NaN, NaN, [1 0.5 0]);
grayPatch = patch(NaN, NaN, [0.5 0.5 0.5]);
cyanPatch = patch(NaN, NaN, [0 1 1]);
lgd = legend([blackPatch, purplePatch, greenPatch, cyanPatch, orangePatch, grayPatch], ...
    {'Significant + STD Beta Similar', 'Top 10 Feature', ...
     'Significant Bacteria', 'Top 10 STD Beta Similar', 'Top 10 STD Beta Dissimilar', 'Not Significant'}, ...
    'Orientation', 'horizontal', ...
    'Location', 'southoutside', ...
    'FontSize', 15, ...
    'Box', 'off');

grid off                       % Remove grid lines
box off                        % Remove axis box border
%% === Load Edge List (Exclude Disease Node) ===
corr_data = readtable('C:\Users\brand\Desktop\AllCombineSpeciasAnalysis\Test 4\AD_combined_Species_Pearson_Correlations.csv');
ad_edges = readtable('C:\Users\brand\Desktop\AllCombineSpeciasAnalysis\Test 4\Gephi\gephi_AD_weighted_species.csv');
biomarker_edges = ad_edges(~strcmpi(ad_edges.Target, 'AD'), :);

% === Count Total Connections ===
source_counts = groupcounts(biomarker_edges.Source);
target_counts = groupcounts(biomarker_edges.Target);
all_nodes = [biomarker_edges.Source; biomarker_edges.Target];
[unique_nodes, ~, idx] = unique(all_nodes);
total_counts = accumarray(idx, 1);

% Clean names for reliable matching
% Clean biomarker names (remove punctuation, trim, lowercase)
corr_names = lower(strtrim(regexprep(string(corr_data.Biomarker), '[^\w\s]', '')));

disp(corr_data.Properties.VariableNames)

% Extract Pearson correlation values from the correct column
corr_values = corr_data.Pearson_Correlation;  %

% Build map from biomarker name → correlation value
corr_map = containers.Map(corr_names, corr_values);

% === Load Node Table and Clean Labels ===
df = readtable('C:\Users\brand\Desktop\AllCombineSpeciasAnalysis\Test 4\Gephi\uniquetoad.csv');
df.Label = strtrim(string(df.Id));
% Label species as DNA if not RNA or mitochondrial
is_rna = contains(df.Label, '(RNA)', 'IgnoreCase', true);
is_mt  = contains(df.Label, 'mt', 'IgnoreCase', true);

for i = 1:height(df)
    if ~is_rna(i) && ~is_mt(i)
        df.Label(i) = df.Label(i) + " (DNA)";
    end
end

% Remove (RNA)/(DNA), punctuation, lowercase, etc.
df.CleanId = lower(regexprep(df.Label, '\s+\(RNA\)|\s+\(DNA\)', ''));
df.CleanId = regexprep(df.CleanId, '[^\w\s]', '');
df.CleanId = strtrim(regexprep(df.CleanId, '\s+', ' '));

% Exclude 'AD'
df = df(~strcmpi(df.CleanId, 'ad'), :);

% === Load Reference Files and Convert to Sets ==
features = readtable('C:\Users\brand\Desktop\AllCombineSpeciasAnalysis\Test 4\top_10_features_AD_combined_species.csv');
sig_bacteria = readtable('C:\Users\brand\Desktop\AllCombineSpeciasAnalysis\Test 4\Significant_Species_Combined_vs_Healthy.csv');
beta_div_similar = readtable('C:\Users\brand\Desktop\AllCombineSpeciasAnalysis\Test 4\Beta Diversity\Top10_STD_Similar_Plot_Data.csv');
beta_div_dissimilar = readtable('C:\Users\brand\Desktop\AllCombineSpeciasAnalysis\Test 4\Beta Diversity\Top10_STD_Dissimilar_Plot_Data.csv');

clean_set = @(x) lower(strtrim(regexprep(regexprep(string(x), '[^\w\s]', ''), '\s+', ' ')));
feature_set = clean_set(features{:,1});
sig_set = clean_set(sig_bacteria{:,1});
beta_similar_set = clean_set(beta_div_similar{:,1});
beta_dissimilar_set = clean_set(beta_div_dissimilar{:,1});

% === Assign Colors ===
df.Color = strings(height(df),1);
for i = 1:height(df)
    biom = df.CleanId(i);
    in_feat = any(strcmp(biom, feature_set));
    in_sig = any(strcmp(biom, sig_set));
    in_sim = any(strcmp(biom, beta_similar_set));
    in_dissim = any(strcmp(biom, beta_dissimilar_set));

    if in_sig && (in_sim || in_dissim)
        df.Color(i) = "black";
    elseif in_feat && in_sig
        df.Color(i) = "blue";
    elseif in_feat && (in_sim || in_dissim)
        df.Color(i) = "pink";
    elseif in_sim
        df.Color(i) = "cyan";
    elseif in_dissim
        df.Color(i) = "orange";
    elseif in_feat
        df.Color(i) = "purple";
    elseif in_sig
        df.Color(i) = "green";
    else
        df.Color(i) = "gray";
    end
end

% === Define Metrics to Plot ===
metrics = {
    'EigenCentrality', 
    'Clustering', 
    'Triangles', 
    'ClosenessCentrality'
};

% === Color Mapping ===
color_map = containers.Map( ...
    {'black', 'purple', 'green', 'orange', 'gray', 'blue', 'pink', 'cyan'}, ...
    {[0 0 0], [0.5 0 0.5], [0 0.5 0], [1 0.5 0], ...
     [0.5 0.5 0.5], [0 0 1], [1 0.41 0.71], [0 1 1]} ...
);
all_top_species = [];
% === Plot Loop ===
for m = 1:length(metrics)
    metric = metrics{m};
   figure;
   [~, idx] = sort(df.(metric), 'descend');
    sorted_df = df(idx, :);
    sorted_df = sorted_df(1:min(25, height(sorted_df)), :);
    if strcmp(metric, 'Triangles')
    disp('=== Top 25 Triangle Counts for AD Species ===');
    triangle_table = sorted_df(:, {'Label', 'Triangles', 'Color'});
    disp(triangle_table);

    % Save to CSV on Desktop
    output_path = 'C:\Users\brand\Desktop\AD_Species_Top25_TriangleCounts.csv';
    writetable(triangle_table, output_path);
    fprintf('✅ Triangle counts saved to: %s\n', output_path);
    end
    all_top_species = [all_top_species; sorted_df.Label];
    % Convert to table for counting
   
    % === Initialize bar color array ===
    bar_colors = zeros(height(sorted_df), 3);
    for i = 1:height(sorted_df)
        bar_colors(i,:) = color_map(sorted_df.Color{i});
    end
    b = bar(sorted_df.(metric), 'FaceColor', 'flat');
    b.CData = bar_colors;
    b.Annotation.LegendInformation.IconDisplayStyle = 'off';
 
     % Adjust axes position and font size
    ax = gca;
    ax.Position = [0.08  0.1  0.9  0.8];   % lower bottom to give space for larger labels
    ax.FontSize = 15;                        % increase tick‐label size
    ax.TickLength = [0 0];
    set(ax, ...
        'XTick', 1:height(sorted_df), ...
        'XTickLabel', sorted_df.Label, ...
        'XTickLabelRotation', 65);
    % === Labels and title ===
    %title([upper(metric(1)) metric(2:end) ' From Top 25 AD Species'], 'FontSize', 15)
    xlabel('AD Species', 'FontSize', 15)
    ylabel(strrep(metric, '_', ' '), 'FontSize', 15)
    box off
hold on
blackPatch = patch(NaN, NaN, [0 0 0]);
purplePatch = patch(NaN, NaN, [0.5 0 0.5]);
greenPatch = patch(NaN, NaN, [0 0.5 0]);
orangePatch = patch(NaN, NaN, [1 0.5 0]);
grayPatch = patch(NaN, NaN, [0.5 0.5 0.5]);
cyanPatch = patch(NaN, NaN, [0 1 1]);

lgd = legend([blackPatch, purplePatch, greenPatch, cyanPatch, orangePatch, grayPatch], ...
    {'Significant + STD Beta Similar ', 'Top 10 Feature', ...
     'Significant Bacteria', 'Top 10 STD Beta Similar', 'Top 10 STD Beta Dissimilar', 'Not Significant'}, ...
    'Orientation', 'horizontal', ...
    'Location', 'southoutside', ...
    'FontSize', 15, ...
    'Box', 'off');

end
% === Frequency Count After Plotting ===
[unique_species, ~, species_idx] = unique(all_top_species);
species_counts = accumarray(species_idx, 1);

% Create and sort summary table
species_summary = table(unique_species, species_counts, ...
    'VariableNames', {'Species', 'Count'});
species_summary = sortrows(species_summary, 'Count', 'descend');

% Display Result
disp('=== Species Appearing Most Frequently Across Top 25 Metrics ===');
disp(species_summary);

